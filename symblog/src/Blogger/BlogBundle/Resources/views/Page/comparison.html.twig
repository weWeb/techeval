{# src/Blogger/BlogBundle/Resources/views/Page/about.html.twig #}
{# Reference: http://tutorial.symblog.co.uk/docs/configuration-and-templating.html #}

{% extends 'BloggerBlogBundle::layout.html.twig' %}

{% block title %}Comparison{% endblock%}

{% block body %}
    <article>
		<section>
        	<h1>Comparison of Symfony with other PHP Frameworks</h1>
       		<p>Symfony is a well-known, mature, and stable PHP web application framework that 
			follows the model view controller (MVC) paradigm. It can be installed on either Unix, Linux, Mac 				
			OS, or Microsoft Windows, as long as a web server and PHP 5 are installed. It is compatible with 
			most of the major databases engines, such as MySQL, PostgreSQL, Oracle, and Microsoft SQL Server, 
			and supports both Doctrine and Propel for object relational mappers (ORMs).</p>

			<p>Customization and flexibility is one of the many aspects that make Symfony a desirable choice 
			for developing dynamic web applications, especially in an enterprise context. The framework’s 
			bundle-structure architecture and configuration system give developers complete control over the 
			project and database setup, the framework behaviour, and integration of third-party libraries.</p>

			<p>Aside from Symfony, there are many other existing PHP frameworks available. CakePHP is another 
			open source MVC-based framework that was published in the same year as Symfony (2005). Like 
			Symfony, it is distributed under the MIT license and therefore can be used within proprietary 
			software. Two other popular PHP frameworks released after Symfony are Codeigniter in 2006 and Yii 
			in 2008. While both follow the MVC design pattern, Codeigniter takes a looser approach and makes 
			models optional. Yii is licensed under the new BSD license, which is nearly identical to the MIT 
			license except the latter lacks a “non-endorsement” clause. On the other hand, Codeigniter is 
			licensed under the open software license v3, which means unlike projects using the other three 
			frameworks, projects using Codeigniter cannot include GPL licensed components as the two licenses 
			are incompatible.</p>
 
			<p>Symfony’s greatest advantages are also its flaws. The flexibility, the customizability, and 
			the many integrated third-party libraries help make development process more consistent and building 
			of complex web applications faster. Unfortunately, the steep learning curve that results from such 
			a powerful framework may prove to be too much for projects that do not require many of the features 
			it offers.</p>
  
			<p>Comparing Codeigniter with Symfony, Codeigniter has less library support and does not come with a 
			built-in ORM. However, Codeigniter is a more starter friendly framework and it is easier to setup; 
			developers only have to unzip the framework into root and they can start using it without any 
			additional configurations. Codeigniter also has a smaller footprint at an extracted folder size of 
			4.1 MB (version 2.1.0) versus Symfony’s extracted size of 16.9 MB (version 2.0.11), and has better 
			performance due to its smaller size and that the controllers do not run on top of a kernel.</p>

			<p>Yii is also a lighter framework than Symfony and is easy to get started with. Developers can 
			download the framework from svn or github and run a simple command to have a viewable base and pages 
			up and running in no time. While both Symfony and Yii have code generation tools, Symfony’s code 
			generation needs to be done through command line consoles while Yii’s tool, called Gii, is web-based. 
			However, even though Yii is a component-based framework, the components cannot be used independently 
			like the bundles in Symfony.</p>
 
			<p>Like Codeigniter and Yii, installation for CakePHP is relatively easier than Symfony; just 
			download the framework, unzip it in the web accessible document root, and it should work as is on 
			most systems. CakePHP also has a lot of “automagic” that happens behind the scene, which can reduce 
			the time it takes to build a website. The only requirement is that projects need to strictly follow 
			CakePHP convention. Symfony, on the other hand, does not follow the “convention over configuration” 
			approach, but rather it removed most of the automagic in the framework (from Symfony 1 to Symfony 2), 
			and hands the full control to the developers.</p>

			<p>In terms of configurations, Symfony allows developers to use several different formats: YAML, XML, 
			PHP, and annotations. These configuration files can be stored at different folders for different levels, 
			targeting different environments. While the extensive configuration system gives developers power over 
			project details, it can be very confusing. Codeigniter stores all its configuration files in one directory 
			and only supports PHP format, making setting configuration options in Codeigniter very simple and 
			straightforward. Yii and CakePHP also has only one directory dedicated to configuration files, and has a 
			lot less configuration files to parse through compared to Symfony. Yii only supports PHP format while 
			CakePHP supports PHP and INI.</p> 

			<p>In terms of benchmark comparisons between the four frameworks using a simple “Hello World” page output, 
			for the Apache benchmark, Yii and Codeigniter had the highest requests per second (rps) at ~2300 rps, 
			Symfony second with ~1370 rps, and CakePHP last with only ~870 rps. For the memory usage benchmark, 
			CakePHP used the most memory at ~2800kb, Symfony second at ~1700 kb, Yii third at ~1200 kb, and Codeigniter 
			used the least memory at ~750 kb. For the response time benchmark, CakePHP responded in ~14.7 ms, Symfony 
			in ~12.8 ms, Codeigniter in ~7.2ms, and Yii in only ~6.6 ms. 
			(Note: These benchmarks were done back in December 2011, so the results may not represent the current 
			status of the frameworks well)</p>

			<p>Most frameworks have their pros and cons, and one may be more suitable than another to use for a project 
			depending on the project nature. However, the amount of community support and documentation is often an 
			important factor for developers when deciding on a framework to use. Yii is the youngest of the four frameworks, 
			therefore has a smaller community, but Yii does have an application development cookbook and very thorough API 
			reference. Likewise, CakePHP and Symfony have extensive cookbooks as well, but CakePHP’s documentation is not 
			always complete and is difficult to search for. Symfony has a lot of clean and well written documentations, 
			but due to the flexibility and power of the framework, the documentations’ complexity and length might deter away 
			novice developers. Also, due to the release of Symfony 2 and the lack of backward compatibility, developers will 
			have to make sure the right version of the documentations is used in conjunction with the right version of 
			Symfony. Symfony does have a very large community due to its popularity with large scale projects and enterprises, 
			so there are many tutorials and documentations available on the web written by volunteers. Out of the four 
			frameworks however, Codeigniter probably has the best official documentations, and it has a lot of tutorials and 
			screencasts available around the web, making it a desirable framework for starters to choose. </p>
		</section>

		<div id="references">
			<h1>References</h1>
			<ul>
				<li><a href="http://symfony2.openthinklabs.com/home/arsitektur" target="_blank">http://symfony2.openthinklabs.com/home/arsitektur</a></li>
				<li><a href="http://www.oxagile.com/article/327-bundles-symfony-development-key-factor-app-extensibility" target="_blank">http://www.oxagile.com/article/327-bundles-symfony-development-key-factor-app-extensibility</a></li>
				<li><a href="http://en.wikipedia.org/wiki/Symfony" target="_blank">http://en.wikipedia.org/wiki/Symfony</a></li>
				<li><a href="http://www.yphpmysql.com/php-framework/symfony-framework-development/" target="_blank">http://www.yphpmysql.com/php-framework/symfony-framework-development/</a></li>
				<li><a href="http://www.hugohamon.com/fr/blog/six-reasons-why-twig-template-engine-makes-my-life-better" target="_blank">http://www.hugohamon.com/fr/blog/six-reasons-why-twig-template-engine-makes-my-life-better</a></li>
				<li><a href="http://en.wikipedia.org/wiki/Codeigniter" target="_blank">http://en.wikipedia.org/wiki/Codeigniter</a></li>
				<li><a href="http://en.wikipedia.org/wiki/CakePHP" target="_blank">http://en.wikipedia.org/wiki/CakePHP</a></li>
				<li><a href="http://snook.ca/archives/php/codeigniter_vs_cakephp" target="_blank">http://snook.ca/archives/php/codeigniter_vs_cakephp</a></li>
				<li><a href="http://ako-kaman.com/2012/03/09/symfony-vs-codeigniter/" target="_blank">http://ako-kaman.com/2012/03/09/symfony-vs-codeigniter</a></li>
				<li><a href="http://www.ruilog.com/blog/view/b6f0e42cf705.html" target="_blank">http://www.ruilog.com/blog/view/b6f0e42cf705.html</a></li>
			</ul>
		</div>
    </article>
{% endblock %}

{% block sidebar %}
	{# empty sidebar #}
{% endblock %}
