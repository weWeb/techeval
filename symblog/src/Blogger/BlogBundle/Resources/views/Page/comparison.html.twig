{# src/Blogger/BlogBundle/Resources/views/Page/about.html.twig #}
{# Reference: http://tutorial.symblog.co.uk/docs/configuration-and-templating.html #}

{% extends 'BloggerBlogBundle::layout.html.twig' %}

{% block title %}Comparison{% endblock%}

{% block body %}
    <article>
		<section>
        	<h1>Comparison of Symfony with other PHP Frameworks</h1>
        	<h2>Overview</h2>
       		<p>Symfony is a well-known, mature, and stable PHP web application framework that 
			follows the model view controller (MVC) paradigm. It can be installed on either Unix, Linux, Mac 				
			OS, or Microsoft Windows, as long as a web server and PHP 5 are installed. It is compatible with 
			most of the major databases engines, such as MySQL, PostgreSQL, Oracle, and Microsoft SQL Server, 
			and supports both Doctrine and Propel for object relational mappers (ORMs).</p>

            <h2>Strengths and Weaknesses</h2>
			<p>Customization and flexibility make Symfony a desirable choice for developing dynamic web 
			applications, especially in an enterprise context. The framework’s bundle-structure architecture 
			and configuration system gives developers complete control over the project and database setup, 
			the framework behaviour, and integration of third-party libraries.</p>
			
			<p>Symfony’s greatest advantages are also its flaws. The flexibility, customizability, and integrated 
			third-party libraries help make the development process more consistent. These features also allow one 
			to build complex web applications faster. Unfortunately, the learning curve that results from such a 
			powerful framework may be too steep to justify its use for projects that do not require many of 
			the features it offers.</p>

            <h2>Competition</h2>
			<p>Aside from Symfony, there are many other existing PHP frameworks available. <strong>CakePHP</strong> is another 
			open source MVC-based framework that was published in the same year as Symfony (2005). Like 
			Symfony, it is distributed under the MIT license and can be used within proprietary 
			software. Two other popular PHP frameworks released after Symfony are Codeigniter in 2006 and Yii 
			in 2008. While both follow the MVC design pattern, Codeigniter takes a more flexible approach and 
			makes models optional. Yii is licensed under the new BSD license, which is nearly identical to the MIT 
			license, except the latter lacks a “non-endorsement” clause. On the other hand, Codeigniter is 
			licensed under the open software license v3. Unlike projects using the other three frameworks, 
			projects using Codeigniter cannot include GPL-licensed components as the two licenses are incompatible.</p>
 
			<p>Comparing <strong>Codeigniter</strong> with Symfony, Codeigniter has less library support and does not come with a 
			built-in ORM. However, Codeigniter is a more starter-friendly framework and is easier to setup; developers 
			only have to unzip the framework into root before they can start using it without any additional 
			configurations. Codeigniter has a smaller footprint at an extracted folder size of 4.1 MB (version 2.1.0) 
			versus Symfony’s extracted size of 16.9 MB (version 2.0.11). Codeigniter performs better due to its smaller 
			size and the fact that the controllers do not run on top of a kernel.</p>

			<p><strong>Yii</strong> is a lighter framework than Symfony and is easy to begin using. Developers can 
			download the framework from svn or github and run a simple command to have a viewable base and pages 
			up and running in no time. While both Symfony and Yii have code-generation tools, Symfony’s code generation 
			needs to be done through command-line consoles; Yii’s tool, called Gii, is web-based. However, even though 
			Yii is a component-based framework, the components cannot be used independently like the bundles in Symfony.</p>
 
			<p>Like Codeigniter and Yii, installing CakePHP is easier than installing Symfony. You simply download the 
			framework and unzip it in the web accessible document root; it should work as is on most systems. CakePHP 
			also has a lot of “automagic” that occurs behind the scenes; this, in turn, reduces the time it takes to 
			build a website. The only requirement is that projects must strictly follow CakePHP conventions. Symfony, 
			on the other hand, does not follow the “convention over configuration” approach. Instead, the developers 
			removed most of the “automagic” from the framework (from Symfony 1 to Symfony 2), thereby handing over full 
			control to the developers.</p>

            <h2>Configuration</h2>
			<p>In terms of configurations, Symfony allows developers to use several different formats: YAML, XML, PHP, 
			and annotations. These configuration files can be stored at different folders for different levels, and 
			can target different environments. While the extensive configuration system gives developers power over 
			project details, it can be very confusing. Codeigniter stores all its configuration files in one directory 
			and only supports PHP format. Setting configuration options in Codeigniter is therefore very simple and 
			straightforward. Yii and CakePHP also have only one directory dedicated to configuration files, as well as 
			fewer configuration files to parse through. Yii only supports PHP format, while CakePHP supports PHP and INI.</p> 

            <h2>Performance</h2>
			<p>Using a simple “Hello World” page output, one could make the following benchmark comparisons between the 
			four frameworks: for the Apache benchmark, Yii and Codeigniter had the highest requests per second (rps) at ~2300 rps, 
			Symfony was second with ~1370 rps, and CakePHP was last with only ~870 rps. For the memory usage benchmark, 
			CakePHP used the most memory at ~2800kb, Symfony used the second most memory at ~1700 kb, Yii used the third 
			most at ~1200 kb, and Codeigniter used the least memory at ~750 kb. For the response time benchmark, CakePHP 
			responded in ~14.7 ms, Symfony responded in ~12.8 ms, Codeigniter responded in ~7.2ms, and Yii 
			responded in only ~6.6 ms. 
			<br>
			(Note: These benchmarks were recorded back in December 2011, thus the results may not accurately 
			represent the current status of the frameworks.)</p>

            <h2>Documentation</h2>
			<p>Every framework has both pros and cons. However, the amount of community support and documentation 
			available for each framework is often an important factor for developers trying to decide which 
			framework to use. Yii is the youngest of the four frameworks, and therefore has a smaller community; 
			however, Yii does have an application development cookbook and a very thorough API reference. Likewise, 
			CakePHP and Symfony also have extensive cookbooks, but CakePHP’s documentation is often incomplete and 
			difficult to find. Symfony has a lot of clean and well-written documentation, but due to the flexibility 
			and power of the framework, the documentation’s length and complexity might deter novice developers. 
			Furthermore, due to the release of Symfony 2 and its lack of backward compatibility, developers have 
			to ensure the correct version of documentation is used in conjunction with the corresponding version of 
			Symfony. Symfony does have a very large community due to its popularity with large scale projects and 
			enterprises, so there are many tutorials and documentations available on the web written by volunteers. 
			Out of the four frameworks however, Codeigniter has the best official documentation and the 
			most web tutorials and screencasts to choose from, all of which make it a desirable framework for 
			starters to choose.</p>
		</section>

		<div id="references">
			<h2>References</h2>
			<ul>
				<li><a href="http://symfony2.openthinklabs.com/home/arsitektur" target="_blank">http://symfony2.openthinklabs.com/home/arsitektur</a></li>
				<li><a href="http://www.oxagile.com/article/327-bundles-symfony-development-key-factor-app-extensibility" target="_blank">http://www.oxagile.com/article/327-bundles-symfony-development-key-factor-app-extensibility</a></li>
				<li><a href="http://en.wikipedia.org/wiki/Symfony" target="_blank">http://en.wikipedia.org/wiki/Symfony</a></li>
				<li><a href="http://www.yphpmysql.com/php-framework/symfony-framework-development/" target="_blank">http://www.yphpmysql.com/php-framework/symfony-framework-development/</a></li>
				<li><a href="http://www.hugohamon.com/fr/blog/six-reasons-why-twig-template-engine-makes-my-life-better" target="_blank">http://www.hugohamon.com/fr/blog/six-reasons-why-twig-template-engine-makes-my-life-better</a></li>
				<li><a href="http://en.wikipedia.org/wiki/Codeigniter" target="_blank">http://en.wikipedia.org/wiki/Codeigniter</a></li>
				<li><a href="http://en.wikipedia.org/wiki/CakePHP" target="_blank">http://en.wikipedia.org/wiki/CakePHP</a></li>
				<li><a href="http://snook.ca/archives/php/codeigniter_vs_cakephp" target="_blank">http://snook.ca/archives/php/codeigniter_vs_cakephp</a></li>
				<li><a href="http://ako-kaman.com/2012/03/09/symfony-vs-codeigniter/" target="_blank">http://ako-kaman.com/2012/03/09/symfony-vs-codeigniter</a></li>
				<li><a href="http://www.ruilog.com/blog/view/b6f0e42cf705.html" target="_blank">http://www.ruilog.com/blog/view/b6f0e42cf705.html</a></li>
			</ul>
		</div>
    </article>
{% endblock %}

{% block sidebar %}
	{# empty sidebar #}
{% endblock %}
